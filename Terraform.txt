

Terraform
----------

Terraform is an infrastructure as code (IaC) tool that allows you to build, change, and version infrastructure safely and efficiently. 
This includes both low-level components like compute instances, storage, and networking, as well as high-level components like DNS entries and SaaS features.
(Terraform is a tool for building, changing and versioning infrastructure safely and efficiently)

Scope - Identify the infrastructure for your project.

Author - Write the configuration for your infrastructure.

Initialize - Install the plugins Terraform needs to manage the infrastructure.

Plan - Preview the changes Terraform will make to match your configuration.

Apply - Make the planned changes.


State File
-----------
State file is a JSON file it contain information about every resource and data object.

Advantages
----------
1. Terraform code is simple to understand
2. can be used multiple vendors
3. config can be split into multiple files
4. can perform dry run easily
5. Importing manual resource.
6. Resuable code with modules


Disadvantages:
--------------
1. 3rd party, new resource might not be availabe
2. Bugs


Terraform files
---------------

1. .tf
2. .tfvars
3. .tfstate



How to store statefile in S3
----------------------------

1. create file backend.tf

		terraform {
			backend "s3" {
			bucket = "bucketName"
			key    = "myterraform.tfstate"
			region = "us-east-1"
			}
		}
save the file.

2. Terraform init (error will come"

3. Install aws cli and aws cofigure.

4. Terraform init

5. Terraform apply

6. Terraform init (check aws s3 bucket state file will prasent)

how to apply locking system.
----------------------------

Locking helps make sure that only one team member runs terraform configuration. 
Locking helps us prevent conflicts, data loss and state file corruption due to multiple runs on same state file. 
DynamoDB can be used as a locking mechanism to remote storage backend S3 to store state files.

add dynamodb.tf file

	resource "aws_dynamodb_table" "dynamodb-terraform-state-lock" {
	name = "terraform-state-lock-dynamo"
	hash_key = "LockID"
	read_capacity = 20
	write_capacity = 20
 
	attribute {
    name = "LockID"
    type = "S"
	}
	tags = {
      Name = "terraform-state-lock-dynamo"
	}
	}
	
	
Terraform apply

check in aws --> dynamodb -> table (here one table craated)
	
add dynamodb_table in backend.tf


		terraform {
			backend "s3" {
			bucket = "statefilestorageterraform"
			key    = "myterraform.tfstate"
			region = "ap-south-1"
			dynamodb_table = "terraform-state-lock-dynamo"
			encrypt = true
			}
		}
		
Terraform apply

lockfile crated in dynamodb.


Terraform Datasource.
---------------------

Data sources in Terraform are used to get information about resources external to Terraform, and use them to set up your Terraform resources.

how add infra in manual infra
-----------------------------

add data source in main.tf


Ex:-

data "aws_vpc" "vpc01" {
  id = "vpc-0149d7c93a729240e(old infra vpc)"
}

resource "aws_subnet" "pub_sub01_VPC01" {
    vpc_id = "${data.aws_vpc.vpc01.id}"
    cidr_block = "10.0.3.0/24"
    availability_zone = "ap-south-1b"

    tags = {
        Name = "pub_sub01_VPC01"
    }
}


terraform apply..

